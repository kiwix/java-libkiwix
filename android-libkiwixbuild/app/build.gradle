plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id "de.undercouch.download"
}

import groovy.json.JsonSlurper

Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

ext["keyId"] = properties.getProperty("signing.keyId", System.getenv('SIGNING_KEY_ID'))
ext["password"] = properties.getProperty("signing.password", System.getenv('SIGNING_PASSWORD'))
ext["key"] = properties.getProperty("signing.key", System.getenv('SIGNING_KEY'))
ext["ossrhUsername"] = properties.getProperty("ossrhUsername", System.getenv('OSSRH_USERNAME'))
ext["ossrhPassword"] = properties.getProperty("ossrhPassword", System.getenv('OSSRH_PASSWORD'))
ext["sonatypeStagingProfileId"] = properties.getProperty("sonatypeStagingProfileId", System.getenv('SONATYPE_STAGING_PROFILE_ID'))

ext {
    set("GROUP_ID", "org.kiwix.kiwixlib")
    set("ARTIFACT_ID", "kiwixlib")
    set("VERSION", "11.0.0")
}

apply from: 'publish.gradle'
apply from: '../../jacoco.gradle'
android {
    compileSdk 32

    defaultConfig {

        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    buildFeatures {
        viewBinding true
    }
    ndkVersion '21.4.7075529'

}

dependencies {
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'
    implementation 'androidx.core:core-ktx:1.7.0'
}

ext.libkiwix_base_url = 'https://download.kiwix.org/nightly/'
ext.libzim_base_url = 'https://download.openzim.org/nightly/'
// change this date to get latest libzim .so and header files
ext.release_date = '2022-12-01'

ext.libzim_version = project.properties["libzim_version"] ?: ""
ext.libkiwix_version = project.properties["libkiwix_version"] ?: ""

task checkLatestLibzimVersion {
    def request = new URL('https://api.github.com/repos/openzim/libzim/releases/latest').openConnection()
    def response = new JsonSlurper().parseText(request.getInputStream().getText())
    project.ext.set("libzim_version", "${response.tag_name}")
}

task checkLatestLibkiwixVersion {
    def request = new URL('https://api.github.com/repos/kiwix/libkiwix/releases/latest').openConnection()
    def response = new JsonSlurper().parseText(request.getInputStream().getText())
    project.ext.set("libkiwix_version", "${response.tag_name}")
}

task downloadLibzimSoAndHeaderFiles(type: Download) {
    src([
            libzim_base_url + release_date + '/libzim_android-arm-' + release_date + '.tar.gz',
            libzim_base_url + release_date + '/libzim_android-arm64-' + release_date + '.tar.gz',
            libzim_base_url + release_date + '/libzim_android-x86-' + release_date + '.tar.gz',
            libzim_base_url + release_date + '/libzim_android-x86_64-' + release_date + '.tar.gz',
            libzim_base_url + release_date + '/libzim_linux-x86_64-' + release_date + '.tar.gz'
    ])
    dest buildDir
    overwrite true
}

task unzipLibzim(type: Copy) {
    // unzip android arm
    from tarTree(buildDir.path + "/libzim_android-arm-" + release_date + ".tar.gz")
    into buildDir
    // unzip android arm64
    from tarTree(buildDir.path + "/libzim_android-arm64-" + release_date + ".tar.gz")
    into buildDir
    // unzip android x86
    from tarTree(buildDir.path + "/libzim_android-x86-" + release_date + ".tar.gz")
    into buildDir
    // unzip android x86_64
    from tarTree(buildDir.path + "/libzim_android-x86_64-" + release_date + ".tar.gz")
    into buildDir
    // unzip linux x86_64
    from tarTree(buildDir.path + "/libzim_linux-x86_64-" + release_date + ".tar.gz")
    into buildDir
}

task copyLibzimHeaderFiles(type: Copy) {
    // copying header file
    from buildDir.path + "/libzim_android-arm-" + release_date + '/include/'
    into projectDir.path + "/src/main/cpp/include/libzim/"
}

task copyLibzimAndroidArm(type: Copy) {
    // copying android_arm so file
    from buildDir.path + "/libzim_android-arm-" + release_date + '/lib/arm-linux-androideabi/'
    into projectDir.path + "/src/main/jniLibs/armeabi-v7a/libzim/"
}

task copyLibzimAndroidArm64(type: Copy) {
    // copying android_arm64 so file
    from buildDir.path + "/libzim_android-arm64-" + release_date + '/lib/aarch64-linux-android/'
    into projectDir.path + "/src/main/jniLibs/arm64-v8a/libzim/"
}

task copyLibzimAndroidx86(type: Copy) {
    // copying android_x86 so file
    from buildDir.path + "/libzim_android-x86-" + release_date + '/lib/i686-linux-android/'
    into projectDir.path + "/src/main/jniLibs/x86/libzim/"
}

task copyLibzimAndroidx86_64(type: Copy) {
    // copying android_x86_64 so file
    from buildDir.path + "/libzim_android-x86_64-" + release_date + '/lib/x86_64-linux-android/'
    into projectDir.path + "/src/main/jniLibs/x86_64/libzim/"
}

task copyLibzimLinux_x86_64(type: Copy) {
    // copying linux_x86_64 so file
    from buildDir.path + "/libzim_linux-x86_64-" + release_date + '/lib/x86_64-linux-gnu/libzim.so.' + libzim_version
    into buildDir.path
}

task renameLibzimSoFile(type: Copy) {
    from(buildDir.path)
    include 'libzim.so.' + libzim_version
    destinationDir file(buildDir.path)
    rename 'libzim.so.' + libzim_version, "libzim.so"
}

task downloadLibkiwixSoAndHeaderFiles(type: Download) {
    src([
            libkiwix_base_url + release_date + '/libkiwix_android-arm-' + release_date + '.tar.gz',
            libkiwix_base_url + release_date + '/libkiwix_android-arm64-' + release_date + '.tar.gz',
            libkiwix_base_url + release_date + '/libkiwix_android-x86-' + release_date + '.tar.gz',
            libkiwix_base_url + release_date + '/libkiwix_android-x86_64-' + release_date + '.tar.gz',
            libkiwix_base_url + release_date + '/libkiwix_linux-x86_64-' + release_date + '.tar.gz'
    ])
    dest buildDir
    overwrite true
}

task unzipLibkiwix(type: Copy) {
    // unzip android arm
    from tarTree(buildDir.path + "/libkiwix_android-arm-" + release_date + ".tar.gz")
    into buildDir
    // unzip android arm64
    from tarTree(buildDir.path + "/libkiwix_android-arm64-" + release_date + ".tar.gz")
    into buildDir
    // unzip android x86
    from tarTree(buildDir.path + "/libkiwix_android-x86-" + release_date + ".tar.gz")
    into buildDir
    // unzip android x86_64
    from tarTree(buildDir.path + "/libkiwix_android-x86_64-" + release_date + ".tar.gz")
    into buildDir
    // unzip linux x86_64
    from tarTree(buildDir.path + "/libkiwix_linux-x86_64-" + release_date + ".tar.gz")
    into buildDir
}

task copyLibkiwixHeaderFiles(type: Copy) {
    // copying header file
    from buildDir.path + "/libkiwix_android-arm-" + release_date + '/include/kiwix/'
    into projectDir.path + "/src/main/cpp/include/libkiwix/"
}

task copyLibkiwixAndroidArm(type: Copy) {
    // copying android_arm so file
    from buildDir.path + "/libkiwix_android-arm-" + release_date + '/lib/arm-linux-androideabi/'
    into projectDir.path + "/src/main/jniLibs/armeabi-v7a/libkiwix/"
}

task copyLibkiwixAndroidArm64(type: Copy) {
    // copying android_arm64 so file
    from buildDir.path + "/libkiwix_android-arm64-" + release_date + '/lib/aarch64-linux-android/'
    into projectDir.path + "/src/main/jniLibs/arm64-v8a/libkiwix/"
}

task copyLibkiwixAndroidx86(type: Copy) {
    // copying android_x86 so file
    from buildDir.path + "/libkiwix_android-x86-" + release_date + '/lib/i686-linux-android/'
    into projectDir.path + "/src/main/jniLibs/x86/libkiwix/"
}

task copyLibkiwixAndroidx86_64(type: Copy) {
    // copying android_x86_64 so file
    from buildDir.path + "/libkiwix_android-x86_64-" + release_date + '/lib/x86_64-linux-android/'
    into projectDir.path + "/src/main/jniLibs/x86_64/libkiwix/"
}

task copyLibkiwixLinux_x86_64(type: Copy) {
    // copying linux_x86_64 so file
    from buildDir.path + "/libkiwix_linux-x86_64-" + release_date + '/lib/x86_64-linux-gnu/libkiwix.so.' + libkiwix_version
    into buildDir.path
}

task renameLibkiwixSoFile(type: Copy) {
    from(buildDir.path)
    include 'libkiwix.so.' + libkiwix_version
    destinationDir file(buildDir.path)
    rename 'libkiwix.so.' + libkiwix_version, "libkiwix.so"
}

task copyBuildKiwixSoFile(type: Copy) {
    // copying linux_x86_64 so file
    from projectDir.path + "/src/androidTests/java/org/kiwix/kiwixlib/libbuildkiwix.so"
    into buildDir.path
}

task copyJavaGeneratedClassFileToTestingFolder(type: Copy) {
    // copying linux_x86_64 so file
    from projectDir.path + "/src/main/java/org/kiwix/target/"
    into projectDir.path + "/src/androidTests/java/org/kiwix/kiwixlib/"
}

// This is temporary task to edit zim/tools.h file should be removed when https://github.com/openzim/libzim/issues/739 this Pr merged
task addSetICUDataDirectory(type: Copy) {
    File file = new File(projectDir.path, "/src/main/cpp/include/libzim/zim/tools.h")
    try {
        PrintWriter printWriter = new PrintWriter(file)
        printWriter.write("/*\n" +
                " * Copyright (C) 2022 Matthieu Gautier <mgautier@kymeria.fr>\n" +
                " *\n" +
                " * This program is free software; you can redistribute it and/or\n" +
                " * modify it under the terms of the GNU General Public License as\n" +
                " * published by the Free Software Foundation; either version 2 of the\n" +
                " * License, or (at your option) any later version.\n" +
                " *\n" +
                " * This program is distributed in the hope that it will be useful, but\n" +
                " * is provided AS IS, WITHOUT ANY WARRANTY; without even the implied\n" +
                " * warranty of MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, and\n" +
                " * NON-INFRINGEMENT.  See the GNU General Public License for more details.\n" +
                " *\n" +
                " * You should have received a copy of the GNU General Public License\n" +
                " * along with this program; if not, write to the Free Software\n" +
                " * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA\n" +
                " *\n" +
                " */\n" +
                "\n" +
                "#ifndef ZIM_TOOLS_H\n" +
                "#define ZIM_TOOLS_H\n" +
                "\n" +
                "#include <zim/zim_config.h>\n" +
                "\n" +
                "\n" +
                "namespace zim {\n" +
                "#if defined(ENABLE_XAPIAN)\n" +
                "\n" +
                "  /** Helper function to set the icu data directory.\n" +
                "   *\n" +
                "   * On Android, we compile ICU without data integrated\n" +
                "   * in the library. So android application needs to set\n" +
                "   * the data directory where ICU can find its data.\n" +
                "   */\n" +
                "  void setICUDataDirectory(const std::string& path);\n" +
                "\n" +
                "#endif\n" +
                "void setICUDataDirectory(const std::string& path);\n" +
                "}\n" +
                "\n" +
                "#endif // ZIM_TOOLS_H\n")
        printWriter.flush()
        printWriter.close()
    } catch (Exception e) {

    }
}